##############################################################################
# 11 - Largest product in a grid
##############################################################################

grid = """08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

units = []

for row in range(20):
    units += [[]]
    for column in range(0, 60, 3):
        units[row] += [int(grid[60*row + column:60*row + column + 2])]

products = []
for i in range(20):
    for j in range(20):
        try:
            products += [units[i][j] * units[i][j+1] * units[i][j+2] * units[i][j+3]]
        except:
            pass
        try:
            products += [units[i][j] * units[i+1][j] * units[i+2][j] * units[i+3][j]]
        except:
            pass
        try:
            products += [units[i][j] * units[i+1][j+1] * units[i+2][j+1] * units[i+3][j+3]]
        except:
            pass
        try:
            products += [units[i][j] * units[i+1][j-1] * units[i+2][j-2] * units[i+3][j-3]]
        except:
            pass

ans = 0
for product in products:
    if ans < product:
        ans = product

print("Problem 11:", ans)

##############################################################################
# 12 Highly divisible triangular numbers
##############################################################################
# with over 500 divisors

# import math
#
# # try brute force
# def num_divisors(n):
#     divisors = 1
#     for i in range(2, int(math.sqrt(n))):
#         if n % i == 0:
#             divisors += 2
#     return(divisors)
#
# n = 1
# triangle = 1
# next_natural = 2
# while n <= 500:
#     triangle += next_natural
#     next_natural += 1
#     n = num_divisors(triangle)
#     # print(triangle, ":", n)
#
# print("Problem 12:", triangle)

##############################################################################
# 13 Large Sum
##############################################################################
#

nums = """3710728753390210279879799822083759024651013574025046376937677490009712648124896970078050417018260538743249861995247410594742333095130581237266173096299194221336357416157252243056330181107240615490825023067588207539346171171980310421047513778063246676892616706966236338201363784183836841787343617267572811287981284997940806548193159262169127588983273844274228917432520321923589422876796487670272189318474514457360013064390911672168568445887116031532767038648610584302543993961982891759366568675793495162176457141856560629502157223196586755079324193331649063524627419049291014324458138226633479447581789257586771833721766196375159057923972824559883840758203565325359399008402633568948830189458628227828801811993848262820142781941399405675871511700943903539866437282711265382998724078447305319010429358686515506006295864861532075273371959191420517255829716938887077154664991155934876035329217149700569385437007057682668462462149565007647178729443837760453282654108756828443191190634694037855217779295145361232725250002960710750825638156567108852583507214587657617241097644733911060721826523687722363604517423706905851860660448207621209813287860733969412811426604180868306193284608111910615569405126896925193432545172838864191804704929321505864256304948362467221648435076201727918039944693004732956340691157324443869081257945140890577062294291971079282095503768752567877309186254074496984450833039368212618336384825330154686196124348767681297534375946515803862875928784902015216855548287172012192577669548182833757993103614740356856449095527097864797581167263201004368978425535399209318374414978068609844840309812907779179908821879532736447567559084803087086987551392711854517078544161852424320693150332599594068957565367821070749269665376763262354472106979395067965269474259770973916669376304263398708541052684708299085211399427365734116182760315001271653786073615010808570091499395125570281987460043753582903531743471732693212357815498262974255273730794953759765105305946966067683156574377167401875275889028025717332296191766687138199318110487701902712526768027607800301367868099252546340106163286652636270218540497705585629946580636237993140746255962240744869082311749777923654662572469233228109171419143028819710328859780666976089293863828502533340334413065578016127815921815005561868836468420090470230530811728164304876237919698424872550366387845831148769693215490281042402013833512446218144177347063783299490636259666498587618221225225512486764533677201869716985443124195724099139590089523100588229554825530026352078153229679624948164195386821877476085327132285723110424803456124867697064507995236377742425354112916842768655389262050249103265729672370191327572567528565324825826546309220705859652229798860272258331913126375147341994889534765745501184957014548792889848568277260777137214037988797153829820378303147352772158034814451349137322665138134829543829199918180278916522431027392251122869539409579530664052326325380441000596549391598795936352974615218550237130764225512118369380358038858490341698116222072977186158236678424689157993532961922624679571944012690438771072750481023908955235974572318970677254791506150550495392297953090112996751986188088225875314529584099251203829009407770775672113067397083047244838165338735023408456470580773088295917476714036319800818712901187549131054712658197623331044818386269515456334926366572897563400500428462801835170705278318394258821455212272512503275512160354698120058176216521282765275169129689778932238195734329339946437501907836945765883352399886755061649651847751807381688378610915273579297013376217784275219262340194239963916804498399317331273132924185707147349566916674687634660915035914677504995186714302352196288948901024233251169136196266227326746080059154747183079839286853520694694454072476841822524674417161514036427982273348055556214818971426179103425986472045168939894221798260880768528778364618279934631376775430780936333301898264209010848802521674670883215120185883543223812876952786713296124747824645386369930090493103636197638780396218407357239979422340623539380833965132740801111666627891981488087797941876876144230030984490851411606618262936828367647447792391803351109890697907148578694408955299065364044742557608365997664579509666024396409905389607120198219976047599490197230297649139826800329731560371200413779037855660850892521673093931987275027546890690370753941304265231501194809377245048795150954100921645863754710598436791786391670211874924319957006419179697775990283006991536871371193661495281130587638027841075444973307840789923115535562561142322423255033685442488917353448899115014406480203690680639606723221932041495354150312888033953605329934036800697771065056663195481234880673210146739058568557934581403627822703280826165707739483275922328459417065250945123252306082291880205877731971983945018088807242966198081119777158542502016545090413245809786882778948721859617721078384350691861554356628840622574736922845095162084960398013400172393067166682355524525280460972253503534226472524250874054075591789781264330331690"""

# make into a list of numbers
numbers = []
for i in range(0, len(nums), 50):
    numbers += [int(nums[i:i+50])]

total = str(sum(numbers))

print("Problem 13:", total[0:10])


##############################################################################
# 14 - Longest Collatz sequence
##############################################################################
# with start under one million

lengths = {1: 1} # in the below function, n will also index

def collatz_length(n):
    if n in lengths:
        ans = lengths[n]
    else:
        if n % 2 == 0:
            next_num = n / 2
        else:
            next_num = 3*n + 1
        ans = 1 + collatz_length(next_num)
        lengths[n] = ans
    return(ans)

longest_start = 1
longest_length = 1
for start in range(2, int(1E6)):
    length = collatz_length(start)
    if longest_length < length:
        longest_length = length
        longest_start = start

print("Problem 13:", longest_start)










##############################################################################
# 15
##############################################################################
#
